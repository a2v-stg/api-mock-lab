version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: mocklab-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mocklab}
      POSTGRES_USER: ${POSTGRES_USER:-mocklab}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mocklab_secret_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mocklab}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mocklab-network

  # Backend API
  backend:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.backend
    container_name: mocklab-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-mocklab}:${POSTGRES_PASSWORD:-mocklab_secret_password}@db:5432/${POSTGRES_DB:-mocklab}
      SECRET_KEY: ${SECRET_KEY:-change-this-in-production-super-secret-key-12345}
      PYTHONUNBUFFERED: 1
    ports:
      - "${BACKEND_PORT:-8001}:8001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mocklab-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Nginx)
  frontend:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.frontend
    container_name: mocklab-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - mocklab-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local

networks:
  mocklab-network:
    driver: bridge
