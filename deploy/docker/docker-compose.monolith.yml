version: '3.8'

# Monolithic deployment - Single container with both frontend and backend
# Use this for development or very small deployments only
# For production, use the standard docker-compose.yml with separate services

services:
  # PostgreSQL Database (still separate - database should always be separate!)
  db:
    image: postgres:15-alpine
    container_name: mocklab-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mocklab}
      POSTGRES_USER: ${POSTGRES_USER:-mocklab}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mocklab_secret_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mocklab}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mocklab-network

  # Monolithic app (frontend + backend in one container)
  app:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.monolith
    container_name: mocklab-app
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-mocklab}:${POSTGRES_PASSWORD:-mocklab_secret_password}@db:5432/${POSTGRES_DB:-mocklab}
      SECRET_KEY: ${SECRET_KEY:-change-this-in-production-super-secret-key-12345}
      PYTHONUNBUFFERED: 1
    ports:
      - "${FRONTEND_PORT:-3000}:80"
      - "${BACKEND_PORT:-8001}:8001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mocklab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/", "&&", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  mocklab-network:
    driver: bridge
